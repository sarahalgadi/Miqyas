<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("./partials/head.ejs") %>
    <link rel="stylesheet" href="/stylesheets/courseReport.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> 
</head>

<body>
    <%- include('./partials/nav.ejs')%>
    <hr>

    <div class="row container-fluid" style="font-family:Arial, Helvetica, sans-serif">
        <div class="col-md-8">
            <h2 style="font-weight: 600; margin: 1rem; padding: 1rem;"><%= courseCode %>: <%= courseName %> - Section
                <%= section %></h2>
                <h2 style="font-weight: 600; margin: 1rem; padding: 1rem;">CLO Assessment Report</h2>
            <h2 style="font-weight: 400; margin: 1rem; padding: 1rem;">Direct Assessment Results</h2>
        </div>
        <div class="col-md-4">
            <h2 style="font-weight: 600; margin-top: 1rem; margin-left: 20%; padding: 1rem; font-size: x-large;">Term:
                <%= term %></h2>
        </div>
    </div>

    <!--Im doing the direct assessment results here. counting per category for the selected section, course, term-->
    <!--Please keep in mind, the results are ME + AE / total number of students in there.-->
    <div class="container">
        <table class="table table-bordered">
          <thead>
            <tr>
              <th>CLO Number</th>
              <th>CLO Description</th>
              <th>BE</th>
              <th>DE</th>
              <th>ME</th>
              <th>AE</th>
              <th>Results</th>
            </tr>
          </thead>
          <tbody>
                <% for (let i = 0; i < CLOnumbers.length; i++) { %>
                  <tr>
                    <td>CLO <%= CLOnumbers[i] %></td>
                    <td><%= CLOstatements[i] %></td>
                    <!-- PER CATEGORY INFO -->
                    <% for (let category of [0, 1, 2, 3]) { %>
                      <% const categoryData = categoryCounts.find(data => parseInt(data.CLONumber) === parseInt(CLOnumbers[i]) && parseInt(data.category) === parseInt(category)); %>
                      <td><%= categoryData ? categoryData.studentCount : 0 %></td>
                    <% } %>
                    <!-- Display results for each CLO -->
                    <td><%= resultsPerCLO[CLOnumbers[i]] ? resultsPerCLO[CLOnumbers[i]].results.toFixed(2) : 0 %>%</td>
                  </tr>
                <% } %>
              
          </tbody>
        </table>
        <!--Here, i'm filtering per section the direct assessment results-->
        <!--It's done per department here.-->
        <div class="dropdown">
            <button type="button" class="btn custom-button dropdown-toggle" style="margin-left: 0;" data-bs-toggle="dropdown">
              Filter
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/edit-section-report/<%= courseCode %>/<%= term %>/<%= section %>/All">All</a></li>
                <% departments.forEach(department => { %>
                  <li><a class="dropdown-item" href="/edit-section-report/<%= courseCode %>/<%= term %>/<%= section %>/<%= department %>"><%= department %></a></li>
                <% }); %>
              </ul>
          </div>
    </div>

    <!--here, ill do the indirect assessment table-->
    <!-- it's from course exit survey per section!! -->

    <div class="row container-fluid" style="font-family:Arial, Helvetica, sans-serif">
        <h2 style="font-weight: 400; margin: 1rem; padding: 1rem;">Indirect Assessment Results</h2>
    </div>
    <div class="container" id="result">
        <table class="table table-bordered">
          <thead>
            <tr>
              <th>CLO Number</th>
              <th>Not Satisfied</th>
              <th>Barely Satisfied</th>
              <th>Satisfied</th>
              <th>Adequately Satisfied</th>
              <th>Fully Satisfied</th>
              <th>Result</th>
            </tr>
          </thead>
          <tbody>
            <% indirectSums.forEach(sum => { %>
              <tr>
                <td>CLO <%= sum.CLONumber %></td>
                <td><%= sum.totalNotSatisfied %></td>
                <td><%= sum.totalBarelySatisfied %></td>
                <td><%= sum.totalSatisfied %></td>
                <td><%= sum.totalAdequatelySatisfied %></td>
                <td><%= sum.totalFullySatisfied %></td>
                <td>
                    <% if (totalIndirectPerCLO[sum.CLONumber] !== undefined) { %>
                      <%= totalIndirectPerCLO[sum.CLONumber] %>%
                    <% } else { %>
                      N/A
                    <% } %>
                  </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>

      <!--ok so here is the histogram div.. as for the script it's tooo messy i know..-->
      <div class="row container-fluid" style="font-family:Arial, Helvetica, sans-serif">
        <h2 style="font-weight: 400; margin: 1rem; padding: 1rem;">Overall Assessment Results</h2>
    </div>
    <div class="container" id="result">
        <canvas id="assessmentChart" width="400" height="130"></canvas>
    </div>



    <!-- ill start the form here.. input type hidden for cloresults.. this is to save it in direct clo per section-->
    <form id="sectionForm" action="/save-section-report" method="POST" onsubmit="submitForm()">
        <input type="hidden" name="calculatedResults" value="<%= JSON.stringify(resultsPerCLO) %>">
        <!--Instructor chooses action plan!-->
        <div class="row container-fluid" style="font-family:Arial, Helvetica, sans-serif">
            <h2 style="font-weight: 400; margin: 1rem; padding: 1rem;">Provide Action Plan to Improve the Course:</h2>
        </div>
        <button class="btn custom-button" style="margin-left: 1;" onclick="addActionPlan(event)">Add Action Plan</button>
        <div class="container" id="result">
            <table id="action-plan" class="table table-bordered">
                <thead>
                    <tr>
                        <th rowspan="2">CLO Number</th>
                        <th colspan="7">Action Plan & Recommendation
                            <tr>
                                <th>Action</th>
                                <th>Responsible</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Resources</th>
                                <th>Delete</th>
                            </tr>
                        </th>
                    </tr>
                    
                </thead>
                <tbody>
                </tbody>
            </table>
    
                <div class="error-text" id="errorText"></div>
                <input type="hidden" name="allActionPlanData" id="allActionPlanDataInput">
        
                <button type="submit" class="btn custom-button mt-4" id="submitButton">Save Assessment</button>
            </form>
        </body>
    
        <script>
            // histogram script. this is the same script used for course reports too.. so we can do it in a separate file.
            // i had to split them into arrays in the server-side.. because javascript could not understand ejs objects.
            const clonumbers = "<%= clohisto %>".split(',').map(Number);
            const indirectres = "<%= indirecthisto %>".split(',').map(Number);
            const directres = "<%= directhisto %>".split(',').map(Number);
        
            const cloData = [];
            for(let i = 0; i< clonumbers.length; i++){
               const obj = 
               {clo: "CLO " + clonumbers[i],
                 directResult: directres[i],
                 indirectResult: indirectres[i]};
                cloData.push(obj);
            }
        
            const cloLabels = cloData.map(item => item.clo);
            const directResults = cloData.map(item => item.directResult);
            const indirectResults = cloData.map(item => item.indirectResult);
        
            const ctx = document.getElementById('assessmentChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: cloLabels,
                    datasets: [
                        {
                            label: 'Direct Results',
                            backgroundColor: 'rgba(21, 65, 110, 0.9)',
                            borderColor: 'rgba(96, 137, 179)',
                            borderWidth: 1,
                            data: directResults,
                        },
                        {
                            label: 'Indirect Results',
                            backgroundColor: 'rgba(174, 183, 191, 0.8)',
                            borderColor: 'rgba(225, 230, 235)',
                            borderWidth: 1,
                            data: indirectResults,
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });
        ;
        </script>
        <script>
          
            function deletePlan(row) {
                const table = document.getElementById('action-plan');
                const rowIndex = row.parentNode.parentNode.rowIndex;
                table.deleteRow(rowIndex);
            }
    
            var allActionPlanData = [];
    
            function addActionPlan(event) {
                event.preventDefault();
              
                // After clicking on the "Add Action Plan" button.
                var tableBody = document.querySelector('#action-plan tbody');
                var newRow = tableBody.insertRow(tableBody.rows.length);
              
                // Object to store data for the new action plan
                var actionPlanData = {};
              
                // Iterating over each cell in the new row.
                for (var i = 0; i < 7; i++) {
                  var cell = newRow.insertCell(i);
              
                  // Adding elements as needed for each action plan.
                  if (i === 0) {
                    // CLO number
                    var select = document.createElement('select');
                    select.className = 'form-select';
                    populateCLODropdown(select); // Pass the select element to the function
              
                    select.addEventListener('change', function () {
                      actionPlanData.cloNumber = this.value;
                    });
                    cell.appendChild(select);
                  } else if (i === 5) {
                    // Resources
                    var textarea = document.createElement('textarea');
                    textarea.className = 'form-control';
                    cell.appendChild(textarea);
              
                    // No need to store Resources here
                  } else if (i === 6) {
                    // Delete button
                    var deleteButton = document.createElement('button');
                    deleteButton.className = 'btn';
                    deleteButton.style.backgroundColor = '#15416e';
                    deleteButton.innerHTML = '<i class="fas fa-times" style="color: white"></i>';
                    deleteButton.onclick = function () {
                      deletePlan(this);
                    };
                    cell.appendChild(deleteButton);
                  } else {
                    // Dates and the action plan statement n resources
                    var input = document.createElement('input');
                    input.type = i === 4 || i === 3 ? 'date' : 'text';
                    input.className = 'form-control';
                    cell.appendChild(input);
                    
                    // Store other data here
                    if (i === 1) {
                      input.addEventListener('input', function () {
                        actionPlanData.statement = this.value;
                      });
                    } else if (i === 2) {
                      input.addEventListener('input', function () {
                        actionPlanData.responsible = this.value;
                      });
                    } else if (i === 3) {
                      input.addEventListener('input', function () {
                        actionPlanData.startDate = this.value;
                      });
                    } else if (i === 4) {
                      input.addEventListener('input', function () {
                        actionPlanData.endDate = this.value;
                      });
                    }
                  }
                }
            
                // Push the new action plan data into the array
                allActionPlanData.push(actionPlanData);
              
                // Update the hidden input field value with the serialized JSON representation
                document.getElementById("allActionPlanDataInput").value = JSON.stringify(allActionPlanData);
                document.getElementById("errorText").innerText = JSON.stringify(allActionPlanData);
            }
            
            function populateCLODropdown(selectDropdown) {
                // Populate options with CLO numbers
                var clos = <%= JSON.stringify(CLOnumbers) %>;
            
                clos.forEach(function (cloNumber) {
                    var option = document.createElement('option');
                    option.value = cloNumber;
                    option.text = cloNumber;
                    selectDropdown.appendChild(option);
                });
            }
           
    
            function submitForm() {
                // Retrieve the input field values
                const actionPlanRows = document.querySelectorAll('#action-plan tbody tr');
                const allActionPlanData = [];
                let error = false;
                actionPlanRows.forEach(function (row) {
                  const cells = row.cells;
                  const actionPlanData = {
                    cloNumber: cells[0].querySelector('select').value,
                    statement: cells[1].querySelector('input').value,
                    responsible: cells[2].querySelector('input').value,
                    startDate: cells[3].querySelector('input').value,
                    endDate: cells[4].querySelector('input').value,
                    resources: cells[5].querySelector('textarea').value,
                  };
            
                  allActionPlanData.push(actionPlanData);
                });
                const cloNums = new Set();

                allActionPlanData.forEach(action=>{
                    if cloNums.has(action[cloNumber]){
                        //error
                        document.getElementById("submitButton").disabled = true;
                        document.getElementById("errorText").innerText = "you can only submit one action plan per clo!";
                        error = true;
                    }
                    else{
                        cloNums.add(action[cloNumber]);
                    }

                    if(!error){
                        document.getElementById("allActionPlanDataInput").value = JSON.stringify(allActionPlanData);
                        document.getElementById("sectionForm").submit();
                    }
                })
                           
              }
    
                        
        </script>

