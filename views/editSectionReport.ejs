<!--Ayat i changed here-->
<!DOCTYPE html>
<html lang="en">
<!--todo: more client side error validation might be needed here.. idk.. like statement should not be empty?-->

<head>
    <%- include("./partials/head.ejs") %>
        <link rel="stylesheet" href="/stylesheets/courseReport.css">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
</head>

<body>
    <%- include('./partials/nav.ejs')%>

        <div class="row container-fluid">
            <div class="col-md-8">
                <h2>
                    <%= courseCode %>: <%= courseName %> - Section
                            <%= section %>
                </h2>
                <h3>CLO Assessment Report</h3>
            </div>
            <div class="col-md-4">
                <h2 style="margin-left: 20%;">Term: <%= term %>
                </h2>
            </div>
        </div>
        <hr class="divider">
        <div class="row">
            <div class="col-md-8">
                <h4>Direct Assessment Results</h4>
            </div>
            <div class="col-md-4">
                <!--Here, i'm filtering per section the direct assessment results-->
                <!--It's done per department here.-->
                <div class="dropdown">
                    <button type="button" class="btn filter custom-button dropdown-toggle"
                        data-bs-toggle="dropdown">
                        Filter by Department
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item"
                                href="/edit-section-report/<%= courseCode %>/<%= term %>/<%= section %>/All">All</a>
                        </li>
                        <% departments.forEach(department=> { %>
                            <li><a class="dropdown-item"
                                    href="/edit-section-report/<%= courseCode %>/<%= term %>/<%= section %>/<%= department %>">
                                    <%= department %>
                                </a></li>
                            <% }); %>
                    </ul>
                </div>
            </div>
        </div>

        <!--direct assessment-->
        <!--Please keep in mind, the results are ME + AE / total number of students in there.-->
        <div class="container">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="headings">CLO Number</th>
                        <th class="headings">CLO Description</th>
                        <th class="headings">Below Expectations</th>
                        <th class="headings">Developing Expectations</th>
                        <th class="headings">Meeting Expectations</th>
                        <th class="headings">Above Expectations</th>
                        <th class="headings">Results</th>
                    </tr>
                </thead>
                <tbody>
                    <% for (let i=0; i < CLOnumbers.length; i++) { %>
                        <tr>
                            <td>CLO <%= CLOnumbers[i] %>
                            </td>
                            <td>
                                <%= CLOstatements[i] %>
                            </td>
                            <!-- PER CATEGORY INFO -->
                            <% for (let category of [0, 1, 2, 3]) { %>
                                <% const categoryData=categoryCounts.find(data=> parseInt(data.CLONumber) ===
                                    parseInt(CLOnumbers[i]) && parseInt(data.category) === parseInt(category)); %>
                                    <td class="categories">
                                        <%= categoryData ? categoryData.studentCount : 0 %>
                                    </td>
                                    <% } %>
                                        <!-- Display results for each CLO -->
                                        <td class="categories">
                                            <%= resultsPerCLO[CLOnumbers[i]] ?
                                                resultsPerCLO[CLOnumbers[i]].results.toFixed(2) : 0 %>%
                                        </td>
                        </tr>
                        <% } %>
                </tbody>
            </table>
        </div>

        <!--indirect assessment-->
        <div class="row">
            <h4>Indirect Assessment Results</h4>
        </div>
        <div class="container" id="result">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="headings">CLO Number</th>
                        <th class="headings">Not Satisfied</th>
                        <th class="headings">Barely Satisfied</th>
                        <th class="headings">Somewhat Satisfied</th>
                        <th class="headings">Adequately Satisfied</th>
                        <th class="headings">Fully Satisfied</th>
                        <th class="headings">Result</th>
                    </tr>
                </thead>
                <tbody>
                    <% indirectSums.forEach(sum=> { %>
                        <tr>
                            <td class="categories">CLO <%= sum.CLONumber %>
                            </td>
                            <td class="categories">
                                <%= sum.totalNotSatisfied %>
                            </td>
                            <td class="categories">
                                <%= sum.totalBarelySatisfied %>
                            </td>
                            <td class="categories">
                                <%= sum.totalSatisfied %>
                            </td>
                            <td class="categories">
                                <%= sum.totalAdequatelySatisfied %>
                            </td>
                            <td class="categories">
                                <%= sum.totalFullySatisfied %>
                            </td>
                            <td class="categories">
                                <% if (totalIndirectPerCLO[sum.CLONumber] !==undefined) { %>
                                    <%= totalIndirectPerCLO[sum.CLONumber] %>%
                                        <% } else { %>
                                            N/A
                                            <% } %>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>

        <!--Histogram-->
        <div class="row">
            <h4>Overall Assessment Results</h4>
        </div>
        <div class="container chart-container" id="result">
            <canvas id="assessmentChart" width="400" height="200"></canvas>
        </div>

        <!-- action plan-->
        <form id="sectionForm" action="/save-section-report/<%= courseCode %>/<%= term %>/<%= section %>" method="POST">
            <input type="hidden" name="calculatedResults" value="<%= JSON.stringify(resultsPerCLO) %>">

            <!--Instructor chooses action plan!-->
            <div class="row">
                <h4>Provide Action Plan to Improve the Course:</h4>
            </div>
            <div class="container" id="result">
                <table id="action-plan" class="table table-bordered">
                    <thead>
                        <tr>
                            <th class="headings" rowspan="2">CLO Number</th>
                            <th class="headings" colspan="6">Action Plan & Recommendation</th>
                        </tr>
                        <tr>
                            <th class="headings">Action</th>
                            <th class="headings">Responsible</th>
                            <th class="headings">Start Time</th>
                            <th class="headings">End Time</th>
                            <th class="headings">Resources</th>
                            <th class="headings">Delete</th>
                        </tr>
                    </thead>
                    <tbody id="action-plan-body">
                        <% if (actionPlans && actionPlans.length> 0) { %>
                            <% actionPlans.forEach((actionPlan)=> { %>
                                
                                <tr>
                                    <td>
                                        <select class="form-select" name="cloNumber">
                                            <% CLOnumbers.forEach(cloNumber=> { %>
                                                <option value="<%= cloNumber %>" <%=actionPlan.CLONumber===cloNumber
                                                    ? 'selected' : '' %>>
                                                    <%= cloNumber %>
                                                </option>
                                                <% }); %>
                                        </select>
                                    </td>
                                    <td><textarea name="statement"><%= actionPlan.statement || '' %></textarea></td>
                                    <td><input type="text" name="responsible"
                                            value="<%= actionPlan.responsibility || '' %>"></td>
                                    <td><input type="date" name="startDate" value="<%= actionPlan.startDate || '' %>">
                                    </td>
                                    <td><input type="date" name="endDate" value="<%= actionPlan.endDate || '' %>"></td>
                                    <td><textarea name="resources"><%= actionPlan.resources || '' %></textarea></td>
                                    <td>

                                        <!-- Add a delete button (you can customize this part) -->
                                    
                                       
                                        <button type="submit" class="btn custom-button" onclick="deleteActionPlan(this,'<%= actionPlan.CLONumber %>', event)"> 
                                            <i class="fas fa-times"></i> Delete</button>
                                    </td>
                                </tr>
                                
                              <% }); %>
                            
                            <% } %>
                    </tbody>
                </table>
                <div id="addContainer">
                    <button class="btn custom-button " onclick="addActionPlan(event)">Add Action Plan</button>
                </div>

                <div class="error-text" id="errorText"></div>
                <input type="hidden" name="allActionPlanData" id="allActionPlanDataInput">
                <!--if we're displaying by department.. user should not submit!-->
                <% if (condition) { %>
                    <div id="saveContainer">
                        <button type="submit" class="btn custom-button mt-4" id="submitButton"
                            onclick="submitForm(event)">Save Assessment</button>
                        <% } %>
                            <% if (!condition) { %>
                                <p>you can only submit this report by displaying all departments!</p>
                                <% } %>
                    </div>
            </div>
        </form>
        
</body>

<script>
    // histogram script. this is the same script used for course reports too.. so we can do it in a separate file.
    // i had to split them into arrays in the server-side.. because javascript could not understand ejs objects.
    const clonumbers = "<%= clohisto %>".split(',').map(Number);
    const indirectres = "<%= indirecthisto %>".split(',').map(Number);
    const directres = "<%= directhisto %>".split(',').map(Number);

    const cloData = [];
    for (let i = 0; i < clonumbers.length; i++) {
        const obj =
        {
            clo: "CLO " + clonumbers[i],
            directResult: directres[i],
            indirectResult: indirectres[i]
        };
        cloData.push(obj);
    }

    const cloLabels = cloData.map(item => item.clo);
    const directResults = cloData.map(item => item.directResult);
    const indirectResults = cloData.map(item => item.indirectResult);

    const ctx = document.getElementById('assessmentChart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: cloLabels,
            datasets: [
                {
                    label: 'Direct Results',
                    backgroundColor: 'rgba(21, 65, 110, 0.9)',
                    borderColor: 'rgba(96, 137, 179)',
                    borderWidth: 1,
                    data: directResults,
                },
                {
                    label: 'Indirect Results',
                    backgroundColor: 'rgba(174, 183, 191, 0.8)',
                    borderColor: 'rgba(225, 230, 235)',
                    borderWidth: 1,
                    data: indirectResults,
                },
            ],
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                },
            },
        },
    });
    ;
</script>
<script>

function deletePlan(row) {
        const table = document.getElementById('action-plan');
        const rowIndex = row.parentNode.parentNode.rowIndex;
        table.deleteRow(rowIndex);
        setTimeout(handleInputChange, 100);
    }


  //for action plans that are saved in the db
  function deleteActionPlan(button, cloNumber, event) {
                var row = button.closest('tr');
                event.preventDefault();
                fetch('/delete-action-plan/<%= courseCode %>/<%= term %>/<%= section %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cloNumber: cloNumber }),
                })
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    console.log('Row deleted successfully:', data);                 
                    row.remove();
                })
                .catch(error => {
                    console.error('Error deleting row:', error);
                });
            }


    function addActionPlan(event) {
        event.preventDefault();

        var tableBody = document.querySelector('#action-plan tbody');
        var newRow = tableBody.insertRow(tableBody.rows.length);

        // Iterating over each cell in the new row.
        for (var i = 0; i < 7; i++) {
            var cell = newRow.insertCell(i);

            // Adding elements as needed for each action plan.
            if (i === 0) {
                var select = document.createElement('select');
                select.className = 'form-select';
                populateCLODropdown(select); // Pass the select element to the function
                select.setAttribute('name', 'cloNumber');
                cell.appendChild(select);

            } else if (i === 1) {
                var textarea = document.createElement('textarea');
                textarea.className = 'form-control';
                textarea.setAttribute('name', 'statement');
                cell.appendChild(textarea);
            }
            else if (i === 5) {
                // Resources
                var textarea = document.createElement('textarea');
                textarea.className = 'form-control';
                textarea.setAttribute('name', 'resources');
                cell.appendChild(textarea);

                // No need to store Resources here
            } else if (i === 6) {
                // Delete button
                var deleteButton = document.createElement('button');
                deleteButton.className = 'btn';
                deleteButton.style.backgroundColor = '#15416e';
                deleteButton.innerHTML = '<i class="fas fa-times" style="color: white"></i>';
                deleteButton.onclick = function () {
                    deletePlan(this);
                };
                cell.appendChild(deleteButton);
            } else {
                // Dates and the action plan statement n resources
                var input = document.createElement('input');
                input.type = i === 4 || i === 3 ? 'date' : 'text';
                input.className = 'form-control';
                input.setAttribute('name',
                    i === 2 ? 'responsible' :
                        i === 3 ? 'startDate' :
                            i === 4 ? 'endDate' : '');
                cell.appendChild(input);
            }
        }
    }


    function populateCLODropdown(selectDropdown) {
        // Populate options with CLO numbers
        var clos = <%= JSON.stringify(CLOnumbers) %>;

        clos.forEach(function (cloNumber) {
            var option = document.createElement('option');
            option.value = cloNumber;
            option.text = cloNumber;
            selectDropdown.appendChild(option);
        });

    }

    function submitForm(event) {
        event.preventDefault();

        var tableBody = document.querySelector('#action-plan tbody');
        let allActionPlanData = Array.from(tableBody.querySelectorAll('tr')).map(function (row) {
            var actionPlanData = {};

            row.querySelectorAll('td').forEach(function (cell) {
                if (cell.querySelector('textarea')) {
                    const index = cell.querySelector('textarea');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('input[type="text"]')) {
                    const index = cell.querySelector('input[type="text"]');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('input[type="date"]')) {
                    const index = cell.querySelector('input[type="date"]');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('select')) {
                    const index = cell.querySelector('select');
                    actionPlanData[index.name] = index.value;
                }
            });

            return actionPlanData; // Return the data object
        }).filter(Boolean); // Filter out null values

        document.getElementById("allActionPlanDataInput").value = JSON.stringify(allActionPlanData);
        console.log(document.getElementById("allActionPlanDataInput").value);
        document.getElementById("sectionForm").submit();
    }


    function validateActionPlan() {

        // Retrieve the input field values
        var tableBody = document.querySelector('#action-plan tbody');
        let allActionPlanData = [];
        let error = false;
        let cloNums = new Set();
        const submitButton = document.getElementById("submitButton");

        // Use map instead of forEach
        allActionPlanData = Array.from(tableBody.querySelectorAll('tr')).map(function (row) {
            var actionPlanData = {};

            row.querySelectorAll('td').forEach(function (cell) {
                if (cell.querySelector('textarea')) {
                    const index = cell.querySelector('textarea');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('input[type="text"]')) {
                    const index = cell.querySelector('input[type="text"]');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('input[type="date"]')) {
                    const index = cell.querySelector('input[type="date"]');
                    actionPlanData[index.name] = index.value;
                } else if (cell.querySelector('select')) {
                    const index = cell.querySelector('select');
                    actionPlanData[index.name] = index.value;
                }
            });

            if (cloNums.has(actionPlanData.cloNumber)) {
                error = true;
                return null; // Return null for duplicates
            } else {
                cloNums.add(actionPlanData.cloNumber);
                return actionPlanData;
            }
        }).filter(Boolean); // Filter out null values

        // Check if there was an error before submitting the form
        if (!error) {

            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
            document.getElementById("errorText").innerText = "You can only submit one action plan per CLO!";
        }
    }

    function handleInputChange() {
        // Clear error messages and re-enable the save button on input change
        const errorText = document.getElementById('errorText');
        const submitButton = document.getElementById('submitButton');

        errorText.innerText = '';
        submitButton.disabled = false;

        // Validate weights again
        validateActionPlan();
    }
    // Attach handleInputChange to input elements
    document.getElementById('action-plan-body').addEventListener('change', handleInputChange);

</script>